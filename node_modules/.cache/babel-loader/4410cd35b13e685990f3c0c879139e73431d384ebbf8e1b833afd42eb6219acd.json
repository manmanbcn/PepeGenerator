{"ast":null,"code":"var _jsxFileName = \"/Users/anatoly/Desktop/coding/projects/my-app/src/components/CharacterCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { eyesData } from '../eyes.js';\nimport { lipsData } from '../lips.js';\nimport { handsData } from '../hands.js';\nimport { decalData } from '../decal.js';\nimport { hairData } from '../hair.js';\nimport html2canvas from 'html2canvas';\nimport { CharacterPart } from './CharacterPart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharacterCanvas = ({\n  characterPartRef\n}) => {\n  _s();\n  const characterPreviewRef = useRef(null);\n  const [downloadFormat, setDownloadFormat] = useState('jpg');\n  const downloadImage = async () => {\n    try {\n      const canvas = await html2canvas( /*#__PURE__*/_jsxDEV(CharacterPart, {\n        eyes: \"\",\n        lips: \"\",\n        hands: \"\",\n        shirts: \"\",\n        hair: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 40\n      }, this), {\n        scale: 2,\n        backgroundColor: downloadFormat === 'jpg' ? null : 'transparent'\n      });\n      const link = document.createElement('a');\n      link.download = `character.${downloadFormat}`;\n      link.href = downloadFormat === 'jpg' ? canvas.toDataURL('image/jpeg') : canvas.toDataURL();\n      link.click();\n    } catch (error) {\n      console.error('Ошибка при сохранении изображения', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadImage,\n      children: \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CharacterCanvas, \"tK0+lePN9jyOE5gOpXm8wNFpC0w=\");\n_c = CharacterCanvas;\nexport { CharacterCanvas };\nvar _c;\n$RefreshReg$(_c, \"CharacterCanvas\");","map":{"version":3,"names":["React","useState","eyesData","lipsData","handsData","decalData","hairData","html2canvas","CharacterPart","jsxDEV","_jsxDEV","CharacterCanvas","characterPartRef","_s","characterPreviewRef","useRef","downloadFormat","setDownloadFormat","downloadImage","canvas","eyes","lips","hands","shirts","hair","fileName","_jsxFileName","lineNumber","columnNumber","scale","backgroundColor","link","document","createElement","download","href","toDataURL","click","error","console","children","onClick","_c","$RefreshReg$"],"sources":["/Users/anatoly/Desktop/coding/projects/my-app/src/components/CharacterCanvas.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport {eyesData} from '../eyes.js';\nimport {lipsData} from '../lips.js';\nimport {handsData} from '../hands.js';\nimport {decalData} from '../decal.js';\nimport {hairData} from '../hair.js';\nimport html2canvas from 'html2canvas'; \nimport {CharacterPart} from './CharacterPart';\n\nconst CharacterCanvas = ( {characterPartRef} ) => {\n  const characterPreviewRef = useRef(null);\n  const [downloadFormat, setDownloadFormat] = useState('jpg');\n\n  const downloadImage = async () => {\n    try {\n      const canvas = await html2canvas(<CharacterPart eyes=\"\" lips=\"\" hands=\"\" shirts=\"\" hair=\"\" />, {\n        scale: 2, \n        backgroundColor: downloadFormat === 'jpg' ? null : 'transparent', \n      });\n\n      const link = document.createElement('a');\n      link.download = `character.${downloadFormat}`;\n      link.href = downloadFormat === 'jpg' ? canvas.toDataURL('image/jpeg') : canvas.toDataURL();\n      link.click();\n    } catch (error) {\n      console.error('Ошибка при сохранении изображения', error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Код остальных компонентов и кнопок */}\n      <button onClick={downloadImage}>Скачать изображение</button>\n    </div>\n  );\n};\n\nexport {CharacterCanvas};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,SAAS,QAAO,aAAa;AACrC,SAAQC,SAAS,QAAO,aAAa;AACrC,SAAQC,QAAQ,QAAO,YAAY;AACnC,OAAOC,WAAW,MAAM,aAAa;AACrC,SAAQC,aAAa,QAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,eAAe,GAAGA,CAAE;EAACC;AAAgB,CAAC,KAAM;EAAAC,EAAA;EAChD,MAAMC,mBAAmB,GAAGC,MAAM,CAAC,IAAI,CAAC;EACxC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMZ,WAAW,eAACG,OAAA,CAACF,aAAa;QAACY,IAAI,EAAC,EAAE;QAACC,IAAI,EAAC,EAAE;QAACC,KAAK,EAAC,EAAE;QAACC,MAAM,EAAC,EAAE;QAACC,IAAI,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAE;QAC7FC,KAAK,EAAE,CAAC;QACRC,eAAe,EAAEd,cAAc,KAAK,KAAK,GAAG,IAAI,GAAG;MACrD,CAAC,CAAC;MAEF,MAAMe,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,QAAQ,GAAI,aAAYlB,cAAe,EAAC;MAC7Ce,IAAI,CAACI,IAAI,GAAGnB,cAAc,KAAK,KAAK,GAAGG,MAAM,CAACiB,SAAS,CAAC,YAAY,CAAC,GAAGjB,MAAM,CAACiB,SAAS,CAAC,CAAC;MAC1FL,IAAI,CAACM,KAAK,CAAC,CAAC;IACd,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;EAED,oBACE5B,OAAA;IAAA8B,QAAA,eAEE9B,OAAA;MAAQ+B,OAAO,EAAEvB,aAAc;MAAAsB,QAAA,EAAC;IAAmB;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAACf,EAAA,CA1BIF,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AA4BrB,SAAQA,eAAe;AAAE,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}