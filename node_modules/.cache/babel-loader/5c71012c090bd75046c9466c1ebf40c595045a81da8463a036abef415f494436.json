{"ast":null,"code":"var _jsxFileName = \"/Users/anatoly/Desktop/coding/projects/my-app/src/components/CharacterCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../CharacterSelector.css';\nimport html2canvas from 'html2canvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharacterCanvas = ({\n  characterPartRef,\n  bg\n}) => {\n  _s();\n  const [downloadFormat, setDownloadFormat] = useState('jpg');\n  const Format = bg => {\n    if (bg.name == \"transparent\") {\n      setDownloadFormat('png');\n    } else {\n      setDownloadFormat('jpg');\n    }\n  };\n  Format(bg);\n  const downloadImage = async () => {\n    try {\n      const canvas = await html2canvas(characterPartRef.current, {\n        scale: 2,\n        backgroundColor: downloadFormat === 'jpg' ? null : 'transparent'\n      });\n      const link = document.createElement('a');\n      link.download = `character.${downloadFormat}`;\n      link.href = downloadFormat === 'jpg' ? canvas.toDataURL('image/jpeg') : canvas.toDataURL();\n      link.click();\n    } catch (error) {\n      console.error('Ошибка при сохранении изображения', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: downloadImage,\n    className: \"save-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"save-link-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"save-link-text-button\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"save-link-img\",\n        src: \"src/assets/save.png\",\n        alt: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(CharacterCanvas, \"lvJAXrb/mY1+WmrL9wjWrNoUmIM=\");\n_c = CharacterCanvas;\nexport { CharacterCanvas };\nvar _c;\n$RefreshReg$(_c, \"CharacterCanvas\");","map":{"version":3,"names":["React","useState","html2canvas","jsxDEV","_jsxDEV","CharacterCanvas","characterPartRef","bg","_s","downloadFormat","setDownloadFormat","Format","name","downloadImage","canvas","current","scale","backgroundColor","link","document","createElement","download","href","toDataURL","click","error","console","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/anatoly/Desktop/coding/projects/my-app/src/components/CharacterCanvas.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../CharacterSelector.css';\nimport html2canvas from 'html2canvas'; \n\nconst CharacterCanvas = ( { characterPartRef, bg } ) => {\n  const [downloadFormat, setDownloadFormat] = useState('jpg');\n\n  const Format = (bg) => {\n    if (bg.name == \"transparent\") {\n      setDownloadFormat('png')\n    }\n    else {\n      setDownloadFormat('jpg')\n    }\n  }\n\n  Format(bg)\n\n  const downloadImage = async () => {\n    try {\n      const canvas = await html2canvas(characterPartRef.current, {\n        scale: 2, \n        backgroundColor: downloadFormat === 'jpg' ? null : 'transparent', \n      });\n\n      const link = document.createElement('a');\n      link.download = `character.${downloadFormat}`;\n      link.href = downloadFormat === 'jpg' ? canvas.toDataURL('image/jpeg') : canvas.toDataURL();\n      link.click();\n    } catch (error) {\n      console.error('Ошибка при сохранении изображения', error);\n    }\n  };\n\n  return (\n        <div onClick={downloadImage} className=\"save-wrapper\">\n        <div className=\"save-link-text\">\n          <span className=\"save-link-text-button\">Save</span>\n          <img className=\"save-link-img\" src=\"src/assets/save.png\" alt=\"Save\" />\n        </div>\n      </div>\n  );\n};\n\nexport {CharacterCanvas};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,0BAA0B;AACjC,OAAOC,WAAW,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,GAAGA,CAAE;EAAEC,gBAAgB;EAAEC;AAAG,CAAC,KAAM;EAAAC,EAAA;EACtD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAMU,MAAM,GAAIJ,EAAE,IAAK;IACrB,IAAIA,EAAE,CAACK,IAAI,IAAI,aAAa,EAAE;MAC5BF,iBAAiB,CAAC,KAAK,CAAC;IAC1B,CAAC,MACI;MACHA,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAEDC,MAAM,CAACJ,EAAE,CAAC;EAEV,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACI,gBAAgB,CAACS,OAAO,EAAE;QACzDC,KAAK,EAAE,CAAC;QACRC,eAAe,EAAER,cAAc,KAAK,KAAK,GAAG,IAAI,GAAG;MACrD,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,QAAQ,GAAI,aAAYZ,cAAe,EAAC;MAC7CS,IAAI,CAACI,IAAI,GAAGb,cAAc,KAAK,KAAK,GAAGK,MAAM,CAACS,SAAS,CAAC,YAAY,CAAC,GAAGT,MAAM,CAACS,SAAS,CAAC,CAAC;MAC1FL,IAAI,CAACM,KAAK,CAAC,CAAC;IACd,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;EAED,oBACMrB,OAAA;IAAKuB,OAAO,EAAEd,aAAc;IAACe,SAAS,EAAC,cAAc;IAAAC,QAAA,eACrDzB,OAAA;MAAKwB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BzB,OAAA;QAAMwB,SAAS,EAAC,uBAAuB;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACnD7B,OAAA;QAAKwB,SAAS,EAAC,eAAe;QAACM,GAAG,EAAC,qBAAqB;QAACC,GAAG,EAAC;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAACzB,EAAA,CAtCIH,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AAwCrB,SAAQA,eAAe;AAAE,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}